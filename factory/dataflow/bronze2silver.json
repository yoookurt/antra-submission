{
	"name": "bronze2silver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_movie_bronze_parquet",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_language_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_movie_genre_junction_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_genre_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "window1"
				},
				{
					"name": "select5"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "select6"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select7"
				},
				{
					"name": "select8"
				},
				{
					"name": "split1"
				},
				{
					"name": "select9"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as (BackdropUrl as string, Budget as double, CreatedBy as string, CreatedDate as string, Id as short, ImdbUrl as string, OriginalLanguage as string, Overview as string, PosterUrl as string, Price as double, ReleaseDate as string, Revenue as double, RunTime as short, Tagline as string, Title as string, TmdbUrl as string, UpdatedBy as string, UpdatedDate as string, genres as (id as short, name as string)[])[],",
				"          IngestTime as timestamp,",
				"          p_IngestDate as date,",
				"          Status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'SourceFile',",
				"     format: 'parquet') ~> source1",
				"source1 select(mapColumn(",
				"          MovieId = movie[1].Id,",
				"          GenreId = movie[1].genres[1].id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1 select(mapColumn(",
				"          GenreId = movie[1].genres[1].id,",
				"          GenreName = movie[1].genres[1].name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"source1 select(mapColumn(",
				"          Language = movie[1].OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 aggregate(groupBy(Language),",
				"     cnt = count(Language)) ~> aggregate1",
				"select5 window(over(Language),",
				"     asc(Language, true),",
				"     LangId = rank()) ~> window1",
				"aggregate1 select(mapColumn(",
				"          Language",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select3 aggregate(groupBy(GenreId,",
				"          GenreName),",
				"     cnt = count(1)) ~> aggregate2",
				"aggregate2 select(mapColumn(",
				"          GenreId,",
				"          GenreName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select7, window1 lookup(select7@Language == select5@Language,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"source1 select(mapColumn(",
				"          movie,",
				"          MovieId = movie[1].Id,",
				"          BackdropUrl = movie[1].BackdropUrl,",
				"          Budget = movie[1].Budget,",
				"          CreatedBy = movie[1].CreatedBy,",
				"          CreatedDate = movie[1].CreatedDate,",
				"          ImdbUrl = movie[1].ImdbUrl,",
				"          Language = movie[1].OriginalLanguage,",
				"          Overview = movie[1].Overview,",
				"          PosterUrl = movie[1].PosterUrl,",
				"          Price = movie[1].Price,",
				"          ReleaseDate = movie[1].ReleaseDate,",
				"          Revenue = movie[1].Revenue,",
				"          RunTime = movie[1].RunTime,",
				"          Tagline = movie[1].Tagline,",
				"          Title = movie[1].Title,",
				"          TmdbUrl = movie[1].TmdbUrl,",
				"          UpdatedBy = movie[1].UpdatedBy,",
				"          UpdatedDate = movie[1].UpdatedDate,",
				"          GenreId = movie[1].genres[1].id,",
				"          IngestTime,",
				"          p_IngestDate,",
				"          Status,",
				"          SourceFile",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"lookup1 select(mapColumn(",
				"          movie,",
				"          MovieId,",
				"          BackdropUrl,",
				"          Budget,",
				"          CreatedBy,",
				"          CreatedDate,",
				"          ImdbUrl,",
				"          Overview,",
				"          PosterUrl,",
				"          Price,",
				"          ReleaseDate,",
				"          Revenue,",
				"          RunTime,",
				"          Tagline,",
				"          Title,",
				"          TmdbUrl,",
				"          UpdatedBy,",
				"          UpdatedDate,",
				"          GenreId,",
				"          IngestTime,",
				"          p_IngestDate,",
				"          Status,",
				"          SourceFile,",
				"          LangId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select8 split(or(lesserOrEqual(RunTime, 0), or((lesser(Budget, 1000000)), (isNull(movie.genres.name)))),",
				"     disjoint: true) ~> split1@(quarantine, clean)",
				"split1@quarantine select(mapColumn(",
				"          movie = movie,",
				"          IngestTime,",
				"          p_IngestDate,",
				"          SourceFile",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"select9 derive(Status = \"quarantine\") ~> derivedColumn1",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     format: 'parquet',",
				"     umask: 0622,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0) ~> sink2",
				"select6 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}