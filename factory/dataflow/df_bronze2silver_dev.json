{
	"name": "df_bronze2silver_dev",
	"properties": {
		"folder": {
			"name": "movie"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_movie_bronze_parquet",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "parse1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          SourceFile as string,",
				"          IngestTime as timestamp,",
				"          p_IngestDate as date,",
				"          Status as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source1 parse(moviestruct = movie ? (Id as integer,",
				"          BackdropUrl as string,",
				"          Budget as integer,",
				"          CreatedBy as string,",
				"          CreatedDate as string,",
				"          ImdbUrl as string,",
				"          OriginalLanguage as string,",
				"          Overview as string,",
				"          PosterUrl as string,",
				"          Price as integer,",
				"          ReleaseDate as string,",
				"          Revenue as integer,",
				"          RunTime as integer,",
				"          Tagline as string,",
				"          Title as string,",
				"          TmdbUrl as string,",
				"          genres as (id as integer,",
				"     name as string)[]),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parse1",
				"derivedColumn1 select(mapColumn(",
				"          MovieId = moviestruct.Id,",
				"          GenreId = moviestruct.genres.id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"parse1 derive(MovieId = moviestruct.Id,",
				"          BackdropUrl = moviestruct.BackdropUrl,",
				"          Budget = moviestruct.Budget,",
				"          CreatedDate = moviestruct.CreatedDate,",
				"          CreatedBy = moviestruct.CreatedBy) ~> derivedColumn1"
			]
		}
	}
}